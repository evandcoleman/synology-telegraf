# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = "$HOSTNAME"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# # Configuration for sending metrics to InfluxDB
[[outputs.influxdb_v2]]
#   ## The URLs of the InfluxDB cluster nodes.
#   ##
#   ## Multiple URLs can be specified for a single cluster, only ONE of the
#   ## urls will be written to each interval.
#   ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://10.0.4.15:8086"]
#
#   ## Token for authentication.
  token = "wjMseqZGapkX_yUk1bmqbex2deFWpkOUwZyNtF0aS_EPPY1CPrSNlCVHt3DgJHCCAO69wsptr4R7PbI-d68KzA=="
#
#   ## Organization is the name of the organization you wish to write to; must exist.
  organization = "Olympus"
#
#   ## Destination bucket to write into.
  bucket = "db"
#
#   ## The value of this tag will be used to determine the bucket.  If this
#   ## tag is not set the 'bucket' option is used as the default.
#   # bucket_tag = ""
#
#   ## If true, the bucket tag will not be added to the metric.
#   # exclude_bucket_tag = false
#
#   ## Timeout for HTTP messages.
#   # timeout = "5s"
#
#   ## Additional HTTP headers
#   # http_headers = {"X-Special-Header" = "Special-Value"}
#
#   ## HTTP Proxy override, if unset values the standard proxy environment
#   ## variables are consulted to determine which proxy, if any, should be used.
#   # http_proxy = "http://corporate.proxy:3128"
#
#   ## HTTP User-Agent
#   # user_agent = "telegraf"
#
#   ## Content-Encoding for write request body, can be set to "gzip" to
#   ## compress body or "identity" to apply no encoding.
#   # content_encoding = "gzip"
#
#   ## Enable or disable uint support for writing uints influxdb 2.0.
#   # influx_uint_support = false
#
#   ## Optional TLS Config for use on HTTP connections.
#   # tls_ca = "/etc/telegraf/ca.pem"
#   # tls_cert = "/etc/telegraf/cert.pem"
#   # tls_key = "/etc/telegraf/key.pem"
#   ## Use TLS but skip chain & host verification
#   # insecure_skip_verify = false


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb", "vd*"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  ## Note: Most, but not all, udev properties can be accessed this way. Properties
  ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]
# at to consume.
#   ## Each data 

# # Retrieves SNMP values from remote agents
[[inputs.snmp]]
#   ## Agent addresses to retrieve values from.
#   ##   format:  agents = ["<scheme://><hostname>:<port>"]
#   ##   scheme:  optional, either udp, udp4, udp6, tcp, tcp4, tcp6.
#   ##            default is udp
#   ##   port:    optional
#   ##   example: agents = ["udp://127.0.0.1:161"]
#   ##            agents = ["tcp://127.0.0.1:161"]
#   ##            agents = ["udp4://v4only-snmp-agent"]
  agents = ["$SNMP_HOST"]
#
#   ## Timeout for each request.
#   # timeout = "5s"
#
#   ## SNMP version; can be 1, 2, or 3.
  # version = 2
#
#   ## Agent host tag; the tag used to reference the source host
  # agent_host_tag = "host"
#
#   ## SNMP community string.
  community = "$HOSTNAME"
#
#   ## Number of retries to attempt.
#   # retries = 3
#
#   ## The GETBULK max-repetitions parameter.
#   # max_repetitions = 10
#
#   ## SNMPv3 authentication and encryption options.
#   ##
#   ## Security Name.
  # sec_name = "admin"
#   ## Authentication protocol; one of "MD5", "SHA", "SHA224", "SHA256", "SHA384", "SHA512" or "".
  # auth_protocol = "MD5"
#   ## Authentication password.
  # auth_password = "kaur5toc!hess*GENK"
#   ## Security Level; one of "noAuthNoPriv", "authNoPriv", or "authPriv".
#   # sec_level = "authNoPriv"
#   ## Context Name.
#   # context_name = ""
#   ## Privacy protocol used for encrypted messages; one of "DES", "AES" or "".
#   # priv_protocol = ""
#   ## Privacy password used for encrypted messages.
#   # priv_password = ""
#
#   ## Add fields and tables defining the variables you wish to collect.  This
#   ## example collects the system uptime and interface variables.  Reference the
#   ## full plugin documentation for configuration details.
  # Measurement name
  # name = "chronos"

   # System name (hostname)
  [[inputs.snmp.field]]
   is_tag = true
   name = "sysName"
   oid = "RFC1213-MIB::sysName.0"
  #  System vendor OID
  [[inputs.snmp.field]]
   name = "sysObjectID"
   oid = "RFC1213-MIB::sysObjectID.0"
  #  System description
  [[inputs.snmp.field]]
   name = "sysDescr"
   oid = "RFC1213-MIB::sysDescr.0"
  #  System contact
  [[inputs.snmp.field]]
   name = "sysContact"
   oid = "RFC1213-MIB::sysContact.0"
  #  System location
  [[inputs.snmp.field]]
   name = "sysLocation"
   oid = "RFC1213-MIB::sysLocation.0"
  #  System uptime
  [[inputs.snmp.field]]
   name = "sysUpTime"
   oid = "RFC1213-MIB::sysUpTime.0"
  # Inet interface
  [[inputs.snmp.table]]
   oid = "IF-MIB::ifTable"
   [[inputs.snmp.table.field]]
     is_tag = true
   oid = "IF-MIB::ifDescr"
  #Syno disk
  [[inputs.snmp.table]]
   oid = "SYNOLOGY-DISK-MIB::diskTable"
   [[inputs.snmp.table.field]]
     is_tag = true
   oid = "SYNOLOGY-DISK-MIB::diskID" 
  #Syno raid
  [[inputs.snmp.table]]
   oid = "SYNOLOGY-RAID-MIB::raidTable"
   [[inputs.snmp.table.field]]
     is_tag = true
   oid = "SYNOLOGY-RAID-MIB::raidName" 
  #Syno load
  [[inputs.snmp.table]]
   oid = "UCD-SNMP-MIB::laTable"
   [[inputs.snmp.table.field]]
     is_tag = true
   oid = "UCD-SNMP-MIB::laNames"
  #  System memTotalSwap
  [[inputs.snmp.field]]
   name = "memTotalSwap"
   oid = "UCD-SNMP-MIB::memTotalSwap.0"
  #  System memAvailSwap
  [[inputs.snmp.field]]
   name = "memAvailSwap"
   oid = "UCD-SNMP-MIB::memAvailSwap.0"
  #  System memTotalReal
  [[inputs.snmp.field]]
   name = "memTotalReal"
   oid = "UCD-SNMP-MIB::memTotalReal.0"
  #  System memAvailReal
  [[inputs.snmp.field]]
   name = "memAvailReal"
   oid = "UCD-SNMP-MIB::memAvailReal.0"
  #  System memTotalFree
  [[inputs.snmp.field]]
   name = "memTotalFree"
   oid = "UCD-SNMP-MIB::memTotalFree.0"
  #  System Status
  [[inputs.snmp.field]]
   name = "systemStatus"
   oid = "SYNOLOGY-SYSTEM-MIB::systemStatus.0"
  #  System temperature
  [[inputs.snmp.field]]
   name = "temperature"
   oid = "SYNOLOGY-SYSTEM-MIB::temperature.0"
  #  System powerStatus
  [[inputs.snmp.field]]
   name = "powerStatus"
   oid = "SYNOLOGY-SYSTEM-MIB::powerStatus.0"
  #  System systemFanStatus
  [[inputs.snmp.field]]
   name = "systemFanStatus"
   oid = "SYNOLOGY-SYSTEM-MIB::systemFanStatus.0"
  #  System cpuFanStatus
  [[inputs.snmp.field]]
   name = "cpuFanStatus"
   oid = "SYNOLOGY-SYSTEM-MIB::cpuFanStatus.0"
  #  System modelName
  [[inputs.snmp.field]]
   name = "modelName"
   oid = "SYNOLOGY-SYSTEM-MIB::modelName.0"
  #  System serialNumber
  [[inputs.snmp.field]]
   name = "serialNumber"
   oid = "SYNOLOGY-SYSTEM-MIB::serialNumber.0"
  #  System version
  [[inputs.snmp.field]]
   name = "version"
   oid = "SYNOLOGY-SYSTEM-MIB::version.0"
  #  System upgradeAvailable
  [[inputs.snmp.field]]
   name = "upgradeAvailable"
   oid = "SYNOLOGY-SYSTEM-MIB::upgradeAvailable.0"
  # System volume   
  [[inputs.snmp.table]]
   oid = "HOST-RESOURCES-MIB::hrStorageTable"
  [[inputs.snmp.table.field]]
     is_tag = true
   oid = "HOST-RESOURCES-MIB::hrStorageDescr"
  # System ssCpuUser 
  [[inputs.snmp.field]]
   name = "ssCpuUser"
   oid = ".1.3.6.1.4.1.2021.11.9.0"
  # System ssCpuSystem  
  [[inputs.snmp.field]]
   name = "ssCpuSystem"
   oid = ".1.3.6.1.4.1.2021.11.10.0"
  # System ssCpuIdle   
  [[inputs.snmp.field]]
   name = "ssCpuIdle"
   oid = ".1.3.6.1.4.1.2021.11.11.0"
  # Service users CIFS
  [[inputs.snmp.table.field]]
   name = "usersCIFS"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "1"
  # Service users AFP
  [[inputs.snmp.table.field]]
   name = "usersAFP"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "2"
  # Service users NFS
  [[inputs.snmp.table.field]]
   name = "usersNFS"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "3"
  # Service users FTP
  [[inputs.snmp.table.field]]
   name = "usersFTP"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "4"
  # Service users SFTP
  [[inputs.snmp.table.field]]
   name = "usersSFTP"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "5"
  # Service users HTTP
  [[inputs.snmp.table.field]]
   name = "usersHTTP"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "6"
  # Service users TELNET
  [[inputs.snmp.table.field]]
   name = "usersTELNET"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "7"
  # Service users SSH
  [[inputs.snmp.table.field]]
   name = "usersSSH"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "8"
  # Service users OTHER
  [[inputs.snmp.table.field]]
   name = "usersOTHER"
   oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
   oid_index_suffix = "9"